:- dynamic(prop/3).
:- dynamic(prop/2).

% general class definition
prop(P, type, C) :- prop(S, subClassOf, C), prop(P, type, S).

% FACTS

% hostname (planetary system)
prop(k2_139_b, hostname, k2_139).
prop(k2_10_b, hostname, k2_10).
prop(k2_110_b, hostname, k2_110).
prop(k2_18_b, hostname, k2_18).
prop(k2_72_e, hostname, k2_72).
prop(wasp_118_b, hostname, wasp_118).
prop(wasp_75_b, hostname, wasp_75).
prop(wolf_503_b, hostname, wolf_503).
prop(trappist_1_b, hostname, trappist_1).
prop(trappist_1_c, hostname, trappist_1).
prop(trappist_1_f, hostname, trappist_1).
prop(trappist_1_g, hostname, trappist_1).
prop(hd_3167_d, hostname, hd_3167).
prop(ross_128_b, hostname, ross_128).
prop(gj_9827_b, hostname, gj_9827).

% discovery year
prop(k2_139_b, was_discovered_in, 2017).
prop(k2_10_b,was_discovered_in , 2016).
prop(k2_110_b, was_discovered_in ,2017).
prop(k2_18_b, was_discovered_in, 2016).
prop(k2_72_e, was_discovered_in , 2016).
prop(wasp_118_b, was_discovered_in, 2016).
prop(wasp_75_b,was_discovered_in ,  2013).
prop(wolf_503_b, was_discovered_in, 2018).
prop(trappist_1_b, was_discovered_in,2016).
prop(trappist_1_c, was_discovered_in, 2016).
prop(trappist_1_f,was_discovered_in , 2017).
prop(trappist_1_g,was_discovered_in ,2017).
prop(hd_3167_d,was_discovered_in ,2017).
prop(ross_128_b,was_discovered_in , 2017).
prop(gj_9827_b,was_discovered_in ,2017).

% radius in Earth Unit (6.371 km)
prop(k2_139_b, has_radius, 9.09).
prop(k2_10_b, has_radius, 4.24).
prop(k2_110_b, has_radius, 2.59).
prop(k2_18_b, has_radius, 2.24).
prop(k2_72_e, has_radius, 1.4).
prop(wasp_118_b, has_radius, 16.13).
prop(wasp_75_b, has_radius, 14.22).
prop(wolf_503_b, has_radius, 2.03).
prop(trappist_1_b,has_radius , 1.09).
prop(trappist_1_c, has_radius, 1.06).
prop(trappist_1_f, has_radius, 1.04).
prop(trappist_1_g, has_radius, 1.13).
prop(hd_3167_d,has_radius , 1.8).
prop(ross_128_b, has_radius, 1.15).
prop(gj_9827_b, has_radius, 1.04).

% mass in Earth Unit (5,9726×10e24 kg)
prop(k2_139_b, has_mass, 121.14).
prop(k2_10_b, has_mass, 27).
prop(k2_110_b,has_mass , 17.09).
prop(k2_18_b,has_mass , 16.46).
prop(k2_72_e,has_mass , 3.13).
prop(wasp_118_b, has_mass, 163.42).
prop(wasp_75_b,has_mass , 340.2).
prop(wolf_503_b, has_mass, 10.9).
prop(trappist_1_b,has_mass , 1.26).
prop(trappist_1_c, has_mass, 1.38).
prop(trappist_1_f, has_mass, 1.07).
prop(trappist_1_g, has_mass, 1.34).
prop(hd_3167_d,has_mass , 6.9).
prop(ross_128_b,has_mass , 1.4).
prop(gj_9827_b,has_mass , 8.2).

% density in Earth Unit (5,51 g/cm³)
prop(k2_139_b, has_density, 0.16).
prop(k2_10_b,has_density , 0.48).
prop(k2_110_b,has_density , 1.36).
prop(k2_18_b,has_density , 1.46).
prop(k2_72_e, has_density, 1.39).
prop(wasp_118_b, has_density, 0.04).
prop(wasp_75_b, has_density, 0.12).
prop(wolf_503_b,has_density , 1.31).
prop(trappist_1_b,has_density , 1.07).
prop(trappist_1_c,has_density , 1.17).
prop(trappist_1_f, has_density, 0.59).
prop(trappist_1_g,has_density , 1.34).
prop(hd_3167_d,has_density , 1.17).
prop(ross_128_b,has_density , 1.31).
prop(gj_9827_b, has_density, 2.28).

% gravity in Earth Unit (9,807 m/s²)
prop(k2_139_b, has_gravity, 1.46).
prop(k2_10_b, has_gravity, 2.23).
prop(k2_110_b,has_gravity , 2.49).
prop(k2_18_b, has_gravity, 3.28).
prop(k2_72_e, has_gravity, 1.39).
prop(wasp_118_b,has_gravity , 1.03).
prop(wasp_75_b, has_gravity, 2.08).
prop(wolf_503_b,has_gravity , 3.05).
prop(trappist_1_b,has_gravity , 1.13).
prop(trappist_1_c,has_gravity , 1.24).
prop(trappist_1_f, has_gravity, 1.01).
prop(trappist_1_g,has_gravity , 1.06).
prop(hd_3167_d, has_gravity, 2.12).
prop(ross_128_b, has_gravity, 1.05).
prop(gj_9827_b,has_gravity , 3.07).

% equilibrium temperature in Kelvin
prop(k2_139_b, has_temp, 508.0).
prop(k2_10_b, has_temp,658.8).
prop(k2_110_b, has_temp, 583.5).
prop(k2_18_b, has_temp, 249.8).
prop(k2_72_e,has_temp, 280.1).
prop(wasp_118_b, has_temp, 1576.2).
prop(wasp_75_b, has_temp, 1437.5).
prop(wolf_503_b, has_temp, 722.8).
prop(trappist_1_b, has_temp, 364.9).
prop(trappist_1_c, has_temp, 311.8).
prop(trappist_1_f, has_temp, 199.7).
prop(trappist_1_g, has_temp, 181.1).
prop(hd_3167_d, has_temp, 766.7).
prop(ross_128_b, has_temp, 280.0).
prop(gj_9827_b, has_temp, 1042.1).

% composition
prop(k2_139_b, has_composition, gas).
prop(k2_10_b, has_composition, water_gas).
prop(k2_110_b,has_composition , rocky_water).
prop(k2_18_b, has_composition, rocky_iron).
prop(k2_72_e, has_composition, rocky_iron).
prop(wasp_118_b,has_composition , gas).
prop(wasp_75_b, has_composition, gas).
prop(wolf_503_b,has_composition, rocky_iron).
prop(trappist_1_b,has_composition , rocky_water).
prop(trappist_1_c,has_composition , rocky_iron).
prop(trappist_1_f, has_composition, rocky_water).
prop(trappist_1_g,has_composition , rocky_iron).
prop(hd_3167_d,has_composition , rocky_iron).
prop(ross_128_b, has_composition, rocky_iron).
prop(gj_9827_b,has_composition, rocky_iron).

% atmosphere type
prop(k2_139_b,has_atmosphere, hydrogene_rich).
prop(k2_10_b, has_atmosphere, metals_rich).
prop(k2_110_b,has_atmosphere,metals_rich ).
prop(k2_18_b,has_atmosphere , hydrogene_rich).
prop(k2_72_e,has_atmosphere ,metals_rich ).
prop(wasp_118_b,has_atmosphere , metals_rich).
prop(wasp_75_b,has_atmosphere , metals_rich).
prop(wolf_503_b,has_atmosphere, metals_rich).
prop(trappist_1_b, has_atmosphere, metals_rich).
prop(trappist_1_c,has_atmosphere ,metals_rich).
prop(trappist_1_f,has_atmosphere ,metals_rich).
prop(trappist_1_g, has_atmosphere, metals_rich).
prop(hd_3167_d,has_atmosphere , metals_rich).
prop(ross_128_b,has_atmosphere , metals_rich).
prop(gj_9827_b,has_atmosphere, metals_rich).

% eccentricity
prop(k2_139_b,has_eccentricity, 0.12).
prop(k2_10_b, has_eccentricity,0.31).
prop(k2_110_b,has_eccentricity,0.08).
prop(k2_18_b, has_eccentricity, 0.2).
prop(k2_72_e,has_eccentricity, 0.01).
prop(wasp_118_b,has_eccentricity, 0).
prop(wasp_75_b,has_eccentricity, 0).
prop(wolf_503_b,has_eccentricity,0.41).
prop(trappist_1_b,has_eccentricity, 0).
prop(trappist_1_c, has_eccentricity, 0).
prop(trappist_1_f,has_eccentricity , 1.03).
prop(trappist_1_g,has_eccentricity, 1.01).
prop(hd_3167_d,has_eccentricity ,0.36).
prop(ross_128_b,has_eccentricity ,0.12).
prop(gj_9827_b,has_eccentricity,0).

% orbit period (days)
prop(k2_139_b,has_orbit_period, 28.38).
prop(k2_10_b,has_orbit_period, 19.30).
prop(k2_110_b,has_orbit_period, 14.26).
prop(k2_18_b,has_orbit_period, 33.34).
prop(k2_72_e,has_orbit_period, 24.17).
prop(wasp_118_b,has_orbit_period, 4.05).
prop(wasp_75_b,has_orbit_period, 2.48).
prop(wolf_503_b,has_orbit_period, 6).
prop(trappist_1_b,has_orbit_period, 1.510).
prop(trappist_1_c,has_orbit_period, 2.42).
prop(trappist_1_f,has_orbit_period, 9.21).
prop(trappist_1_g, has_orbit_period, 12.35).
prop(hd_3167_d,has_orbit_period, 8.49).
prop(ross_128_b,has_orbit_period, 10.27).
prop(gj_9827_b,has_orbit_period, 1.21).

% habitability zone distance (from his star)
prop(k2_139_b, distance_from_star, -2.37).
prop(k2_10_b,distance_from_star, -2.17).
prop(k2_110_b,distance_from_star, -2.07).
prop(k2_18_b,distance_from_star, -0.12).
prop(k2_72_e,distance_from_star, -0.16).
prop(wasp_118_b,distance_from_star, -2.46).
prop(wasp_75_b,distance_from_star, -2.43).
prop(wolf_503_b,distance_from_star, -2.17).
prop(trappist_1_b,distance_from_star, -1.48).
prop(trappist_1_c,distance_from_star, -1.41).
prop(trappist_1_f,distance_from_star, 0.14).
prop(trappist_1_g, distance_from_star, 1.04).
prop(hd_3167_d,distance_from_star, -2.24).
prop(ross_128_b,distance_from_star, -1.39).
prop(gj_9827_b,distance_from_star, -2.23).

% number of stars in the system
prop(k2_139_b,has_stars_in_sys, 1).
prop(k2_10_b,has_stars_in_sys, 1).
prop(k2_110_b,has_stars_in_sys, 1).
prop(k2_18_b,has_stars_in_sys, 1).
prop(k2_72_e,has_stars_in_sys, 1).
prop(wasp_118_b,has_stars_in_sys, 1).
prop(wasp_75_b,has_stars_in_sys, 2).
prop(wolf_503_b,has_stars_in_sys, 1).
prop(trappist_1_b,has_stars_in_sys, 1).
prop(trappist_1_c,has_stars_in_sys, 7).
prop(trappist_1_f,has_stars_in_sys, 1).
prop(trappist_1_g, has_stars_in_sys,1).
prop(hd_3167_d,has_stars_in_sys, 1).
prop(ross_128_b,has_stars_in_sys, 1).
prop(gj_9827_b,has_stars_in_sys, 1).

% metallicity [star]
prop(k2_139_b,his_star_has_met, 0.23).
prop(k2_10_b,his_star_has_met, -0.07).
prop(k2_110_b, his_star_has_met, -0.3).
prop(k2_18_b,his_star_has_met, 0.12).
prop(k2_72_e, his_star_has_met, -0.1).
prop(wasp_118_b,his_star_has_met,0.16).
prop(wasp_75_b,his_star_has_met, 0.07).
prop(wolf_503_b,his_star_has_met, -0.47).
prop(trappist_1_b,his_star_has_met, 0.04).
prop(trappist_1_c,his_star_has_met, 0.04).
prop(trappist_1_f,his_star_has_met, 0.04).
prop(trappist_1_g,his_star_has_met, 0.04).
prop(hd_3167_d,his_star_has_met, 0.04).
prop(ross_128_b,his_star_has_met, -0.02).
prop(gj_9827_b,his_star_has_met, -0.028).

% effective temperature [star]
prop(k2_139_b, his_star_has_temp, 5287).
prop(k2_10_b, his_star_has_temp, 5620).
prop(k2_110_b, his_star_has_temp , 5010).
prop(k2_18_b, his_star_has_temp, 3503).
prop(k2_72_e, his_star_has_temp , 3497).
prop(wasp_118_b, his_star_has_temp, 6410).
prop(wasp_75_b, his_star_has_temp,  6100).
prop(wolf_503_b, his_star_has_temp, 4716).
prop(trappist_1_b, his_star_has_temp, 2550).
prop(trappist_1_c, his_star_has_temp, 2550).
prop(trappist_1_f, his_star_has_temp, 2550).
prop(trappist_1_g, his_star_has_temp, 2550).
prop(hd_3167_d, his_star_has_temp, 5367).
prop(ross_128_b, his_star_has_temp, 3192).
prop(gj_9827_b, his_star_has_temp, 4255).


% RULES
prop(P, has_volume, V) :-
    prop(P, has_density, D),
    prop(P, has_mass, M),
    V is M/D,
    write('(mass is in Earth Unit)').

% spectral classification [star]
prop(P, his_star_is_class, C) :-
    prop(P, his_star_has_temp, T),
    prop(T, starTemp_is_class, C).

prop(T, starTemp_is_class, a) :-
    T > 7500.

prop(T, starTemp_is_class, f) :-
    T > 6000, T =< 7500.

prop(T, starTemp_is_class, g)  :-
    T > 5200, T =< 6000.

prop(T, starTemp_is_class, k) :-
    T > 3700, T < 5200.

prop(T, starTemp_is_class, m) :-
    T > 2400, T < 3700.

% zone classification (habitability)
prop(P, is_in_zone, Z):-
    prop(P, distance_from_star, D),
    prop(D, habitability_is_class, Z).

prop(D, habitability_is_class, hot) :-
    D < -1.40.

prop(D, habitability_is_class, warm) :-
    D > -1.40.

% is an exoplanet made of rock?
%prop(P, has_composition, rocky) :-
%    prop(P, has_composition, rocky_iron);
%    prop(P, has_composition, rocky_water).


% mass-radius classification
prop([M|R], massRadius_is_class, subterran) :-
    M > 0.1, M =< 0.5;
    R > 0.5, R < 1.2.

prop([M|R], massRadius_is_class, terran) :-
    M > 0.5, M =< 2;
    R > 0.8, R < 1.9.

prop([M|R], massRadius_is_class, superterran) :-
    M > 2, M < 10;
    R > 1.3, R < 3.3.

prop([M|R], massRadius_is_class, neptunian) :-
    M > 10, M =< 50;
    R > 3.5, R < 27.

prop([M|R], massRadius_is_class, jovian) :-
    M > 50, M < 5000,
    R > 3.5, R < 27.


% density classification
prop(D, density_is_class, low) :-
    D < 1.

prop(D, density_is_class, medium) :-
    D >= 1, D < 2.

prop(D, density_is_class, high) :-
    D >= 2.

% gravity classification
prop(G, gravity_is_class, weak) :-
    G >= 1, G =< 1.5.

prop(G, gravity_is_class, medium) :-
    G > 1.5, G =< 2.5.

prop(G, gravity_is_class, strong) :-
    G > 2.5.

% eq_temp classification
prop(ET, temp_is_class, acceptable) :-
    ET =< 300.

prop(ET, temp_is_class, too_high) :-
    ET > 300, ET < 1000.

prop(ET, temp_is_class, too_much_high) :-
    ET >= 1000.


prop(ECC, eccentricity_is_class, circular) :-
    ECC = 0.

prop(ECC, eccentricity_is_class, elliptic) :-
    ECC > 0, ECC < 1.

prop(ECC, eccentricity_is_class, parabolic) :-
    ECC = 1.

prop(ECC, eccentricity_is_class, hyperbolic) :-
    ECC > 1.


% orbit-period classification
prop(OP, operiod__is_class, few) :-
    OP =< 10.

prop(OP, operiod__is_class, many) :-
    OP >= 10, OP =< 20.

prop(OP, operiod__is_class, a_lot) :-
    OP >= 20.

% metallicity classification
prop(MS, metallicity_is_class, low) :-
    MS =< 0.

prop(MS, metallicity_is_class, medium) :-
    MS > 0.


% description
get_info_about(Planet) :-
    prop(Planet, hostname, Star),
    write(Planet),
    write(' is an exoplanet in a planetary system whose star is '),
    write(Star),
    prop(Planet, is_mass_class, Class),
    write(', it was classified by mass as a '),
    write(Class),
    prop(Planet, was_discovered_in, Year),
    write(' and it was discovered in '),
    write(Year).

get_systems :-
    prop(_, hostname, Star),
    write(Star).

%----------------------------------------------------

%DEFINIZIONE DELLE CLASSI
% classe come LISTA di Liste di coppie(attr,val): classe <== [cong1 OR
% cong2 OR...OR congn] congiunzione di coppie (attributo, valore): Forma
% Normale Disgiuntiva


%FEATURES: attributo(nome, valore)

attributo(radius, [small, medium, large]). %small<8, medium>8, high>14
attributo(mass_class,[terran, superterran, neptunian, jovian]).
attributo(density, [low, medium, high]). % low:~0, medium: ~1, high>2
attributo(gravity, [weak, medium, strong]).%weak:~1, medium: ~2, strong>3
attributo(eq_temp, [acceptable, too_high, too_much_high]). %acceptable < 300, too high>330, too much high > 1000
attributo(composition, [gas, water_gas, rocky_water, rocky_iron]).
attributo(atmosphere, [hydrogen_rich, metals_rich]).
attributo(eccentricity, [circular, elliptic, parabolic, hyperbolic]). %circ: e=0, ellipt: 0<e<1, parab: e=1, hyp: e>1
attributo(orbit_period_days, [few, many, a_lot]). %few < 10, many > 10, a lot > 20
attributo(zone_class, [cold, warm, hot]).
attributo(num_stars, [0,1,2,3,4,5,6,7,8]).
attributo(metallicity, [nan, low, medium]).
attributo(star_temp_class, [f,g,k,m]). %f:6000<t<7000, g:5200<t<6000,

%ESEMPI TRAINING

% ----------------------------------------------------POST INCONTRO FACE TO FACE ALDO VS DANIELE CECCA - LO SCONTRO FINALE---------
%gj180c (meso TUTTI)
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 2, metallicity = low, star_temp_class = m]).

%gj422b
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = medium, star_temp_class = m]).

%gj667Cc
esempio(habitable, [massRadius_class = terran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 6, metallicity = low, star_temp_class = m]).

%hd283869
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = low, star_temp_class = k]).

%k272e
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = a_lot, zone_class = warm, num_stars = 4, metallicity = medium, star_temp_class = m]).

%kepler61b
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = low, star_temp_class = k]).

%kepler443
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = strong, eq_temp = acceptable, composition = rocky_iron, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = medium, star_temp_class = k]).

%wolf1071c
esempio(habitable, [massRadius_class = terran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = many, zone_class = warm, num_stars = 3, metallicity = low, star_temp_class = m]).
% ------------------------------------------------------------------------
%gj163c (psychroplanet TUTTI)
esempio(habitable, [massRadius_class = superterran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 3, metallicity = low, star_temp_class = k]).

%gj367Ce
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 6, metallicity = low, star_temp_class = m]).

%kapteynB
esempio(habitable, [massRadius_class = terran, density = medium, gravity = medium, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 2, metallicity = medium, star_temp_class = m]).

%trappist1e
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = few, zone_class = warm, num_stars = 7, metallicity = low, star_temp_class = m]).

%kepler1652b
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = low, star_temp_class = m]).

%kepler442b
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = medium, star_temp_class = k]).

%kepler1229b
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = a_lot, zone_class = warm, num_stars = 1, metallicity = low, star_temp_class = k]).

%proximaCenB
esempio(habitable, [massRadius_class = terran, density = medium, gravity = weak, eq_temp = acceptable, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = many, zone_class = warm, num_stars = 1, metallicity = medium, star_temp_class = m]).
% ------------------------------------------------------------------------
%gj86ab
esempio(non_habitable,[massRadius_class = jovian, density = medium, gravity = strong, eq_temp = too_high, composition = gas, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = many, zone_class = hot, num_stars = 1, metallicity = low, star_temp_class = g]).

%gj581b
esempio(non_habitable,[massRadius_class = neptunian, density = low, gravity = weak, eq_temp = too_high, composition = gas, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = few, zone_class = hot, num_stars = 3, metallicity = medium, star_temp_class = m]).

%hd38283b
esempio(non_habitable,[massRadius_class = jovian, density = low, gravity = medium, eq_temp = too_high, composition = gas, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = hot, num_stars = 1, metallicity = medium, star_temp_class = g]).

%k217b
esempio(non_habitable,[massRadius_class = superterran, density = medium, gravity = strong, eq_temp = too_high, composition = rocky_iron, atmosphere = metals_rich, eccentricity = circular, orbit_period_days = many, zone_class = hot, num_stars = 1, metallicity = low, star_temp_class = k]).

%kepler68b
esempio(non_habitable,[massRadius_class = jovian, density = low, gravity = medium, eq_temp = too_high, composition = gas, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = a_lot, zone_class = warm, num_stars = 3, metallicity = medium, star_temp_class = g]).

%wasp80b
esempio(non_habitable,[massRadius_class = jovian, density = low, gravity = medium, eq_temp = too_high, composition = gas, atmosphere = hydrogene_rich, eccentricity = elliptic, orbit_period_days = few, zone_class = hot, num_stars = 1, metallicity = medium, star_temp_class = k]).

% ------------------------------------------------------------------------

:- op(300,xfx, <==).

classifica(Oggetto, Classe) :- %object: lista coppie (attr,valore)
    Classe<==Descrizione, %prende la desc della classe, la lista delle liste
    member(CongiunzioneAttributi, Descrizione),
    soddisfa(Oggetto, CongiunzioneAttributi). %AttrConj: lista delle coppie (attr,val), quindi una singola lista all'interno della lista delle liste della Description della Class

soddisfa(Oggetto,Congiunzione) :- %nella lista passata al 2� argomento (quindi una congiunzione di coppie (attr,val))...
    \+ (member(Att = Valx, Congiunzione),%..(NON) c'� una coppia formata da un attributo il cui valore � differente rispetto al..
        member(Att = Valy, Oggetto),%..valore che ha il medesimo attributo nella lista di object
        Valx \== Valy). %i due valori sono differenti


% qst fnzn apprende le regole per una data classe:
% 1)raccoglie il training set in una lista
% 2)costruisce e manda in output una descrizione per la
%   classe
% 3)asserisce la corrispondente regola (la apprende)
apprendi(Classe) :-
    bagof(esempio(C,O), esempio(C,O), Esempi), %accogghj gli esempi in una lista
    apprendi(Esempi, Classe, Descrizione), %induce la regola (crea la description che corrisponde alla classe passata in input in relazione agli esempi raccolti dal training set
    nl, write(Classe), write(' <=='),nl, %stampa la regola
    write(Descrizione),
    assert(Classe<==Descrizione). %asserisce regola (associa a quella classe la description costruita

% per coprire tutti gli oggetti della Classe in Examples:
apprendi(Esempi, Classe, []) :-  % SE nessun esempio in Examples appartiene alla Classe allora Descrizione = []..
    \+ member(esempio(Classe, _), Esempi). %.. (vuota, tutti gli esempi sono coperti, non dobbiamo pi� aggiungere alcuna descrizione)

% [Conge] � una lista di congiunzioni di coppie (attr, val) che copre
% almeno un esempio positivo per la Classe e nessuno negativo (cio� di un'altra classe)
% [Congi] si ottiene rimuovendo da Examples quelli
% coperti da Congie e coprendo i rimanenti oggetti di Classe in Esempi
apprendi(Esempi, Classe, [Conge|Congi]) :- %ALTIMENTI Descrizione = [Conge|Congi], una lista di liste
    apprendi_cong(Esempi, Classe, Conge), % funzione che apprende una possibile congiunzione di coppie (attr, val) per Class
    rimuovi(Esempi, Conge, RestoEsempi), %rimuove esempi utilizzati che soddisfano la congiunzione
    apprendi(RestoEsempi, Classe, Congi). %copre esempi rimasti

% [Cong] � una lista di valori di attributi soddisfatti da almeno un
% esempio positivo per tale Classe e da nessuno negativo
apprendi_cong(Esempi, Classe, []) :-
    \+ (member(esempio(ClasseX, _), Esempi), %da Examples prendiamo un esempio di una classe diversa da quella di interesse
        ClasseX \== Classe),!. %quindi se non ci sono pi� esempi di altre classi si passa al learn_cong successivo

apprendi_cong(Esempi, Classe, [Cond|Conds]) :- % specifica della singola congiunzione al terzo argomento
    scegli_cond(Esempi, Classe, Cond), %sceglie la condizione Cond, congiunzione di coppie (attributo, valore)
    filtra(Esempi, [Cond], Esempi1), % Examples1: esempi che soddisfano Cond
    apprendi_cong(Esempi1, Classe, Conds).

% come viene scelta Cond di filtering?
% utilizziamo un' EURISTICA per ridurre l'elevata combinatoriet� del programma
scegli_cond(Esempi, Classe, AttVal) :-
    findall(AV/Punti, punti(Esempi, Classe, AV, Punti), AVs), % cerca le coppie (attr,val) candidate e le ordina in base ad un punteggio che li viene assegnato (da un euristica)
    best(AVs, AttVal). %trova la coppia con il miglior punteggio

best([AttVal/_],AttVal).
best([AV0/S0,AV1/S1|AVSlist],AttVal) :-
    S1 > S0, !,
    best([AV1/S1|AVSlist], AttVal);
    best([AV0/S0|AVSlist], AttVal).

filtra(Esempi, Cond, Esempi1) :-
    findall(esempio(Classe,Ogg),
            (member(esempio(Classe,Ogg),Esempi), soddisfa(Ogg, Cond)),
            Esempi1).

rimuovi([],_,[]).
rimuovi([esempio(_,Ogg)|Es], Conge, Es1) :-
    soddisfa(Ogg, Conge), !, %il primo es matcha conge
    rimuovi(Es, Conge, Es1). %lo rimuove

rimuovi([E|Es], Conge, [E|Es1]) :-
    rimuovi(Es, Conge, Es1).

% va a cercare una coppia (attr,val) candidata a far parte della
% congiunzione per la Description della Classe
punti(Esempi, Classe, AttVal, Punti) :-
    candidato(Esempi, Classe, AttVal), %un attributo/val adatto
    filtra(Esempi, [AttVal], Esempi1), %Examples1 lista che contiene solo esempi che soddisfano la condizione Feature = Val (es. tutti quelli che hanno composition = rocky)
    length(Esempi1, N1), %N1 lunghezza della lista Examples 1
    conta_pos(Esempi1, Classe, Npos1), %contiamo num esempi positivi (di quella Classe): Npos1
    Npos1 > 0,                           %almeno uno positivo
    Punti is (Npos1 + 1) / (N1 + 2). %CORREZIONE DI LAPLACE: num esempi di Classe + 1 / num esempi rimasti + 2

% un candidato possibile
candidato(Esempi,Classe,Att = Val) :-
    attributo(Att, Valori), %prendiamo un attributo qualunque
    member(Val, Valori), % e ne prendiamo i possibili valori
    adatto(Att = Val, Esempi, Classe). %controlliamo se Feature = Val (es. num_stars = 2) � adatto per far parte
                                            % della congiunzione delle coppie (attr, val) che potrebbe formare la Description che caratterizza la Classe

adatto(AttVal, Esempi, Classe) :-
    member(esempio(ClasseX, OggX), Esempi), %cerchiamo almeno un esempio negativo che deve non matchare con FeatureVal
    ClasseX \== Classe, %esempio negativo..
    \+ soddisfa(OggX, [AttVal]),!. %..che non matcha (FeatureVal � del tipo Feature = Val es. num_stars = 2)

conta_pos([],_,0).
conta_pos([esempio(ClasseX,_)|Esempi],Classe,N) :-
    conta_pos(Esempi, Classe, N1),
    (ClasseX = Classe, !, N is N1+1; N=N1).

